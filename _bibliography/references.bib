@InProceedings{10.1007/978-3-319-68167-2_14,
author="Baranov{\'a}, Zuzana
and Barnat, Ji{\v{r}}{\'i}
and Kejstov{\'a}, Katar{\'i}na
and Ku{\v{c}}era, Tade{\'a}{\v{s}}
and Lauko, Henrich
and Mr{\'a}zek, Jan
and Ro{\v{c}}kai, Petr
and {\v{S}}till, Vladim{\'i}r",
title="Model Checking of C and C++ with DIVINE 4",
booktitle="Automated Technology for Verification and Analysis",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="201--207",
abstract="The fourth version of the DIVINE model checker provides a modular platform for verification of real-world programs. It is built around an efficient interpreter of LLVM code which, together with a small, verification-oriented operating system and a set of runtime libraries, enables verification of code written in C and C++.",
isbn="978-3-319-68167-2"
}

@InProceedings{10.1007/978-3-319-32582-8_14,
author="Mr{\'a}zek, Jan
and Bauch, Petr
and Lauko, Henrich
and Barnat, Ji{\v{r}}{\'i}",
title="SymDIVINE: Tool for Control-Explicit Data-Symbolic State Space Exploration",
booktitle="Model Checking Software",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="208--213",
abstract="We present SymDIVINE: a tool for bit-precise model checking of parallel C and C++ programs. It builds upon LLVM compiler infrastructure, hence, it uses LLVM IR as an input formalism. Internally, SymDIVINE extends the standard explicit-state state space exploration with SMT machinery to handle non-deterministic data values. As such, SymDIVINE is on a halfway between a symbolic executor and an explicit-state model checker. The key differentiating aspect present in SymDIVINE is the ability to decide about equality of two symbolically represented states preventing thus repeated exploration of the state space graph. This is crucially important in particular for verification of parallel programs where the state space graph is full of diamond-shaped subgraphs.",
isbn="978-3-319-32582-8"
}
